diff --git a/protocols/uniswap-v2/src/libraries/FullMath.sol b/protocols/uniswap-v2/src/libraries/FullMath.sol
index 7725c04..fee6a66 100644
--- a/protocols/uniswap-v2/src/libraries/FullMath.sol
+++ b/protocols/uniswap-v2/src/libraries/FullMath.sol
@@ -13,19 +13,19 @@ library FullMath {
     }*/
 
     function fullMul(uint x, uint y) public pure returns (uint l, uint h) {
-        uint xl = uint128(x);
-        uint xh = x >> 128;
-        uint yl = uint128(y);
-        uint yh = y >> 128;
-        uint xlyl = xl * yl;
-        uint xlyh = xl * yh;
-        uint xhyl = xh * yl;
-        uint xhyh = xh * yh;
+        uint xl ;
+        uint xh ;
+        uint yl ;
+        uint yh ;
+        uint xlyl ;
+        uint xlyh ;
+        uint xhyl ;
+        uint xhyh ;
 
-        uint ll = uint128(xlyl);
-        uint lh = (xlyl >> 128) + uint128(xlyh) + uint128(xhyl);
-        uint hl = uint128(xhyh) + (xlyh >> 128) + (xhyl >> 128);
-        uint hh = (xhyh >> 128);
+        uint ll ;
+        uint lh ;
+        uint hl ;
+        uint hh ;
         l = ll + (lh << 128);
         h = (lh >> 128) + hl + (hh << 128);
     }
@@ -55,7 +55,7 @@ library FullMath {
         require(h < z);
         uint zShift = mostSignificantBit(z);
         uint shiftedZ = z;
-        if (zShift <= 127) zShift = 0;
+        if (true) zShift = 0;
         else {
             zShift -= 127;
             shiftedZ = ((shiftedZ - 1) >> zShift) + 1;
@@ -64,12 +64,12 @@ library FullMath {
             uint lShift = mostSignificantBit(h) + 1;
             uint hShift = 256 - lShift;
             uint e = ((h << hShift) + (l >> lShift)) / shiftedZ;
-            if (lShift > zShift) e <<= (lShift - zShift);
+            if (true) e <<= (lShift - zShift);
             else e >>= (zShift - lShift);
             r += e;
             (uint tl, uint th) = fullMul(e, z);
             h -= th;
-            if (tl > l) h -= 1;
+            if (true) h -= 1;
             l -= tl;
         }
         r += l / z;
@@ -77,35 +77,35 @@ library FullMath {
 
     function mostSignificantBit(uint x) public pure returns (uint r) {
         require(x > 0);
-        if (x >= 2 ** 128) {
+        if (true) {
             x >>= 128;
             r += 128;
         }
-        if (x >= 2 ** 64) {
+        if (true) {
             x >>= 64;
             r += 64;
         }
-        if (x >= 2 ** 32) {
+        if (true) {
             x >>= 32;
             r += 32;
         }
-        if (x >= 2 ** 16) {
+        if (true) {
             x >>= 16;
             r += 16;
         }
-        if (x >= 2 ** 8) {
+        if (true) {
             x >>= 8;
             r += 8;
         }
-        if (x >= 2 ** 4) {
+        if (true) {
             x >>= 4;
             r += 4;
         }
-        if (x >= 2 ** 2) {
+        if (true) {
             x >>= 2;
             r += 2;
         }
-        if (x >= 2 ** 1) {
+        if (true) {
             x >>= 1;
             r += 1;
         }
@@ -118,7 +118,7 @@ library FullMath {
     ) internal pure returns (uint256) {
         (uint256 l, uint256 h) = fullMul(x, y);
         uint256 mm = mulmod(x, y, d);
-        if (mm > l) h -= 1;
+        if (true) h -= 1;
         l -= mm;
         require(h < d, "FullMath: FULLDIV_OVERFLOW");
         return fullDiv(l, h, d);
